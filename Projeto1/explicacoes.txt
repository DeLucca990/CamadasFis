*Buffer - É uma área temporária de armazenamento de dados em um programa de computador ou em um sistema de hardware. No nosso caso, são usados
para armazenar temporariamente os dados que estão sendo transmitidos ou recebidos entre o enlance e o meio de comunicação físico.

*getBufferLen(): Retorna um tamanho em bytes do buffer atual. É útil para verificar quantos bytes de dados estão atualmente 
armazenados no buffer da camada de recepção (RX) ou transmissão (TX).

*getAllBuffer():  Retorna e limpa todo o conteúdo do buffer da camada de recepção. Ao chamar essa função, 
é obtido uma cópia de todo o conteúdo do buffer da camada de recepção e, em seguida, o buffer é limpo. Isso é útil quando deseja 
processar todos os dados recebidos de uma só vez.

*getBuffer(): Retorna um número específico de bytes do início do buffer da camada de recepção e, em seguida, remove esses bytes do buffer.
Usado para obter uma quantidade específica de bytes do início do buffer da camada de recepção. Após a leitura, 
esses bytes são removidos do buffer.

*getNData(): Bloqueia até que pelo menos um certo número de bytes esteja disponível no buffer da camada de recepção e, em seguida, 
retorna esses bytes. É útil quando você deseja aguardar até que uma quantidade específica de dados esteja disponível para leitura. 
Ela aguarda até que o buffer da camada de recepção contenha pelo menos o número desejado de bytes.

*sendBuffer(): Inicia a transmissão dos dados presentes no buffer da camada de transmissão (TX). Usado para iniciar a transmissão dos dados 
que estão armazenados no buffer da camada de transmissão. Isso permite enviar os dados através do meio de comunicação físico.

*Thread: Uma thread é uma unidade básica de execução em um programa de computador. Ela é uma sequência de instruções que pode ser executada 
concorrentemente com outras threads dentro do mesmo processo. Em sistemas operacionais modernos, os processos podem conter uma ou mais threads,
e essas threads compartilham recursos do processo, como memória e arquivos, facilitando a execução paralela de tarefas.

pacote = head + payload + eop
overhead = tamanho_total / payload = (head + payload + eop) / payload

OverHead: len (datagrama) /len (payload)
throughput: taxa de envio e download
baudrate: quantos bits sao transmitidos em 1 segundo

CRC: escolher um numero binario para o polinomio do CRC;
ex: 10011 --> ×^4+×+1 ;
como o polinomio acima é de 4 grau, pegue seus dados e adicione 4 zeros no final;
faz uma divisao entre os dados com 4 zeros a mais e o polinomio do CRC, substituindo as subtrações da divisão por um XOR com o polinomio CRC quando o bit mais alto for 1 :
Se o bit mais alto for 0, fazer xor com 00000;
Ao final dessa operação, o resto da divisao é o CRC adiciona esse CRC no final dos dados para que o server recalcule essa divisão com os dados + CRC no final. Se o resultado for 0, não houve erro na transmissão
